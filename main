from http.server import  SimpleHTTPRequestHandler
import socketserver
import json
import bytes

class ResponseMessage:
    def __init__(self, weightedAnimalsDictionary):
        self.animalsDictionary = weightedAnimalsDictionary
        self.response = ""

    def __repr__(self):
        return self.animalsDictionary.__repr__()

    def makeDecisionBasdOnDictionary(self):
        decision = ""
        grade = 0
        for pair in self.animalsDictionary.items():
            if grade < pair[1]:
                self.response = pair[0]
        self.response = decision

    def getResponse(self):
        return self.response


class Coordinate:
    def __init__(self, longitude, latitude):
        self.longitude = longitude
        self.latitude = latitude

    def __repr__(self):
        return "Longitude : " + str(self.longitude) + "\nLatitude : " + str(self.longitude)

    def __str__(self):
        return "Longitude : " + str(self.longitude) + "\nLatitude : " + str(self.longitude)

class ServerHandler(SimpleHTTPRequestHandler):

    def do_POST(self):
      contentLen = int(self.headers['Content-Length'])
      postBody = self.rfile.read(contentLen)
      print (self.parseToCoordinates(postBody))

    def convertPostMessageToDictionary(self, postBody):
        return json.loads(postBody)

    def parseToCoordinates(self, postBody):
        listOfCoordinates = []
        coordinatesList = self.convertPostMessageToDictionary(postBody)
        print(coordinatesList['coordinates'])
        listOfCoordinates = [Coordinate(*pair) for pair in coordinatesList['coordinates']]
        print(listOfCoordinates[0])
        return listOfCoordinates

def runServer(path, port, handler=ServerHandler):
    httpd = socketserver.TCPServer((path, port), handler)
    print("serving at port", port)
    httpd.serve_forever()

if __name__ == '__main__':
    runServer("",8080,ServerHandler)


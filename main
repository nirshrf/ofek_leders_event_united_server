from http.server import  HTTPServer, SimpleHTTPRequestHandler, BaseHTTPRequestHandler
import socketserver
import json
import bytes

class ResponseMessage:
    def __init__(self, weightedAnimalsDictionary):
        self.animalsDictionary = weightedAnimalsDictionary
        self.response = ""

    def __repr__(self):
        return self.animalsDictionary.__repr__()

    def makeDecisionBasdOnDictionary(self):
        decision = ""
        grade = 0
        for pair in self.animalsDictionary.items():
            if grade < pair[1]:
                self.response = pair[0]
        self.response = decision

    def getResponse(self):
        return self.response


class ServerHandler(SimpleHTTPRequestHandler):

    def do_POST(self):
      contentLen = int(self.headers['Content-Length'])
      postBody = self.rfile.read(contentLen)
      print (self.convertPostMessageToDicttionary(postBody))

    def convertPostMessageToDicttionary(self, postBody):
        return json.loads(postBody.decode('utf8').replace("\\'", '"'))[0]


def runServer(path, port, handler=ServerHandler):
    httpd = socketserver.TCPServer((path, port), handler)
    print("serving at port", port)
    httpd.serve_forever()

if __name__ == '__main__':
    runServer("",8080,ServerHandler)

